# OPENINAPP

## Prerequisites

- Node.js installed
- Google API credentials (CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, REFRESH_TOKEN)
  - Refer to the [Google API documentation](https://developers.google.com/gmail/api/quickstart) for instructions on obtaining credentials.

## Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/your-username/gmail-autoresponder.git

Install dependencies:

bash :

cd gmail-autoresponder
npm install
Add your Google API credentials:

Create a file named Google_Auth_credentials.js in the project root.
Populate it with your CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, and REFRESH_TOKEN.
Usage
Run the script:

bash:
npm start
The script will start checking for unread emails and sending replies at random intervals.


Customize the reply message:
Modify the createReplyRaw function in index.js to change the reply message.
Adjust the interval:

Change the getRandomInterval function parameters in index.js to set a different interval for checking emails.



## Authentication Module Improvement

The `googleAuth.js` module provides essential functionality for obtaining OAuth2 credentials, but there's room for improvement to enhance the user experience. Consider implementing the following enhancements:

### Simplified User Interface

1. **Integrate a Simple Web Server:**
   - Incorporate a lightweight web server within the module to host a web page for user interaction.

2. **Automatic URL Generation:**
   - Modify the `generateAuthUrl` function to automatically generate the authorization URL and open it in the default web browser, reducing the need for manual URL copying.

3. **Handling Authorization Callback:**
   - Implement a callback endpoint on the web server to capture the authorization code when the user grants access. This enables automatic token exchange.

4. **Feedback to the User:**
   - Provide clear feedback on the web page, indicating the success or failure of the authorization process.

By implementing these enhancements, the authentication module becomes more user-friendly, streamlining the process of obtaining OAuth2 credentials with minimal user effort.

